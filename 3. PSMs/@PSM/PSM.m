classdef (Abstract) PSM < handle
    % PSM
    % Implements an interface for proxy system models to interact with unit
    % converting, bias correction, and data analysis functions.
    %
    % PSM Methods:
    %   setUnitConversion - Set values used for unit conversion.
    %   setBiasCorrector - Specify a bias corrector to use.
    %
    % Abstract PSM Methods: (These must be implemented in individual PSMs)
    %    getStateIndices - Determine which state vector elements are needed to run
    %    errorCheckPSM - Internal error checking
    %    runForwardModel - Run a specific forward model
    
    % ----- Written By -----
    % Jonathan King, University of Arizona, 2019
    
    properties
        H;                     % Sampling indices
        addUnit;               % Additive unit conversion
        multUnit;              % Multiplicative unit conversion
        biasCorrection = nullCorrector;        % A bias corrector
    end
    
    % Abstract methods unique to individual PSMs
    methods (Abstract = true)
        
        getStateIndices( obj, ensMeta );
        % This method determines the state vector elements that are needed 
        % to run an instance of a PSM for a particular proxy. 
        %
        % The indices of those state vector elements are then saved as 
        % the "H" property. (This is why the method has no outputs. The
        % outputs are saved within the "H" property of each PSM.)
        %
        % This method will require the ensemble metadata as an input. When
        % this method is implemented in concrete PSM classes, it may also
        % use additional input arguments.
        
        setStateIndices( obj, H );
        % Set state vector indices manually

        errorCheckPSM( obj );
        % This method implements internal error checking for specific PSM.
        %
        % It is intended to check whether or not a PSM is ready to be used
        % for data assimilation.
        %
        % Dash calls this method for each PSM before starting a data
        % assimilation in order to ensure that the user did not forget any
        % steps when building their PSMs.
        
        runForwardModel( obj, M, t, d );
        % This is the function used by dash to run individual forward
        % models.
        %
        % It has 3 INPUTS
        %    M: A set of values extracted from the state vectors in the
        %       model ensemble. Most PSMs will only need this input. The
        %       size will be (nSamplingIndices x nEns)
        %
        %    t: The index of the time step being processed in the assimilation.
        %
        %       This will be unnecessary for most standard PSMs, but could
        %       be necessary for time-dependent forward models. For example,
        %       a model that incorporates biological evolution over time 
        %       could use different calibrations for different assimilation
        %       time steps.
        %
        %    d: The index of the observation being processed.
        %
        %       This will rarely be necessary for PSMs. It would be
        %       useful for developers using the "handle" capabilities of a
        %       PSM to assign multiple proxy records to a single PSM
        %       instance. This might be desirable for PSMs with a high
        %       computational cost of initialization.
        %
        % The method also has 2 OUTPUTS:
        %    Ye: These are the proxy estimates generated by running the
        %        forward model. Size is (1 x nEns)
        %
        %    R: This is an estimate of estimate variance generated by the
        %       forward model. This is an optional output; it is fine to
        %       write PSMs that do not calculate R. Dash will only require
        %       this output when the user does not specify a value for R at
        %       the beginning of assimilation.
    end
    
    % Interface methods that also apply unit conversion and bias correction
    methods
        
        % Interfaces bias correction, unit conversion, dash, with unique PSMs
        [Ye, R] = run( obj, M, t, d );
        
        % Interface error checking for bias correction, unit conversion,
        % dash, and unique PSMs.
        review( obj, nState );
        
    end
    
    % Unit conversion and bias correction
    methods
        
        % Set the additive and multiplicative unit conversions
        setUnitConversion( obj, varargin );
       
        % Error check unit conversion
        reviewUnitConversion( obj, H );
       
        % Select a bias corrector
        setBiasCorrector( obj, type, varargin );
       
    end
    
end