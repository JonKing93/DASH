gridfile.transform
==================
Transform data loaded from a .grid file.

----

Syntax
------

.. raw:: html

    <pre>

.. rst-class:: syntax

| :ref:`[transform, parameters] = obj.transform <gridfile.transform.syntax1>`
| :ref:`[transform, parameters] = obj.transform('default') <gridfile.transform.syntax1>`
| :ref:`[sourceTransform, sourceParameters] = obj.transform('sources') <gridfile.transform.syntax2>`
| :ref:`[sourceTransform, sourceParameters] = obj.transform('sources', s) <gridfile.transform.syntax2>`
| :ref:`[sourceTransform, sourceParameters] = obj.transform('sources', sourceNames) <gridfile.transform.syntax2>`
| :ref:`obj.transform(type, params) <gridfile.transform.syntax3>`
| :ref:`obj.transform(type, params, s) <gridfile.transform.syntax4>`
| :ref:`obj.transform(type, params, sources) <gridfile.transform.syntax4>`
| :ref:`obj.transform('ln') <gridfile.transform.syntax5>`
| :ref:`obj.transform('ln', [], ...) <gridfile.transform.syntax5>`
| :ref:`obj.transform('log', base, ...) <gridfile.transform.syntax6>`
| :ref:`obj.transform('exp') <gridfile.transform.syntax7>`
| :ref:`obj.transform('exp', [], ...) <gridfile.transform.syntax7>`
| :ref:`obj.transform('power', power, ...) <gridfile.transform.syntax8>`
| :ref:`obj.transform('plus', plus, ...) <gridfile.transform.syntax9>`
| :ref:`obj.transform('times', times, ...) <gridfile.transform.syntax10>`
| :ref:`obj.transform('linear', coeffs, ...) <gridfile.transform.syntax11>`
| :ref:`obj.transform('none', ...) <gridfile.transform.syntax12>`
| :ref:`obj.transform('none', [], ...) <gridfile.transform.syntax12>`

.. raw:: html

    </pre>

----

Description
-----------

.. raw:: html

    <pre>

.. _gridfile.transform.syntax1:

.. rst-class:: syntax

| [:ref:`transform <gridfile.transform.output.transform>`, :ref:`parameters <gridfile.transform.output.parameters>`] = obj.transform
| [:ref:`transform <gridfile.transform.output.transform>`, :ref:`parameters <gridfile.transform.output.parameters>`] = obj.transform('default')

.. raw:: html

    </pre>

Return the default transformation for a gridfile.


.. raw:: html

    <pre>

.. _gridfile.transform.syntax2:

.. rst-class:: syntax

| [:ref:`sourceTransform <gridfile.transform.output.sourceTransform>`, :ref:`sourceParameters <gridfile.transform.output.sourceParameters>`] = obj.transform('sources')
| [:ref:`sourceTransform <gridfile.transform.output.sourceTransform>`, :ref:`sourceParameters <gridfile.transform.output.sourceParameters>`] = obj.transform('sources', :ref:`s <gridfile.transform.input.s>`)
| [:ref:`sourceTransform <gridfile.transform.output.sourceTransform>`, :ref:`sourceParameters <gridfile.transform.output.sourceParameters>`] = obj.transform('sources', sourceNames)

.. raw:: html

    </pre>

Returns the transformations for the specified data sources. If no soures are specified, returns the transformation for all data sources in the gridfile.


.. raw:: html

    <pre>

.. _gridfile.transform.syntax3:

.. rst-class:: syntax

| obj.transform(:ref:`type <gridfile.transform.input.type>`, :ref:`params <gridfile.transform.input.params>`)

.. raw:: html

    </pre>

Applies a data transformation to data loaded from a .grid file. The transformation is applied to all data sources in currently in the .grid file, as well as any data sources added in the future. Only one transformation is supported at a time, so calling this method will override any previously specified transformations. See below for details of different transformations


.. raw:: html

    <pre>

.. _gridfile.transform.syntax4:

.. rst-class:: syntax

| obj.transform(:ref:`type <gridfile.transform.input.type>`, :ref:`params <gridfile.transform.input.params>`, :ref:`s <gridfile.transform.input.s>`)
| obj.transform(:ref:`type <gridfile.transform.input.type>`, :ref:`params <gridfile.transform.input.params>`, sources)

.. raw:: html

    </pre>

Applies a transformation to data loaded from the specified data Overrides any data transformations previously applied to the data sources.


.. raw:: html

    <pre>

.. _gridfile.transform.syntax5:

.. rst-class:: syntax

| obj.transform('ln')
| obj.transform('ln', [], ...)

.. raw:: html

    </pre>

Take the natural logarithm of loaded data.


.. raw:: html

    <pre>

.. _gridfile.transform.syntax6:

.. rst-class:: syntax

| obj.transform('log', :ref:`base <gridfile.transform.input.base>`, ...)

.. raw:: html

    </pre>

Takes the logarithm of loaded data. Supports base-10 and base-e (natural) logarithms.


.. raw:: html

    <pre>

.. _gridfile.transform.syntax7:

.. rst-class:: syntax

| obj.transform('exp')
| obj.transform('exp', [], ...)

.. raw:: html

    </pre>

Takes the exponential of loaded data.


.. raw:: html

    <pre>

.. _gridfile.transform.syntax8:

.. rst-class:: syntax

| obj.transform('power', :ref:`power <gridfile.transform.input.power>`, ...)

.. raw:: html

    </pre>

Raise loaded data to the specified power.


.. raw:: html

    <pre>

.. _gridfile.transform.syntax9:

.. rst-class:: syntax

| obj.transform('plus', :ref:`plus <gridfile.transform.input.plus>`, ...)

.. raw:: html

    </pre>

Add the indicated value to loaded data.


.. raw:: html

    <pre>

.. _gridfile.transform.syntax10:

.. rst-class:: syntax

| obj.transform('times', :ref:`times <gridfile.transform.input.times>`, ...)

.. raw:: html

    </pre>

Multiply loaded data by the specified value.


.. raw:: html

    <pre>

.. _gridfile.transform.syntax11:

.. rst-class:: syntax

| obj.transform('linear', :ref:`coeffs <gridfile.transform.input.coeffs>`, ...)

.. raw:: html

    </pre>

Apply a linear transformation to loaded data.


.. raw:: html

    <pre>

.. _gridfile.transform.syntax12:

.. rst-class:: syntax

| obj.transform('none', ...)
| obj.transform('none', [], ...)

.. raw:: html

    </pre>

Do not apply a transformation to loaded data.


----

Examples
--------

.. rst-class:: collapse-examples

Supported transformations
+++++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example1"><label for="example1"><strong>Supported transformations</strong></label><div class="content">


This section gives a quick overview of supported transformations and their parameters.

Natural Logarithm:

::

    grid.transform('ln');
    grid.transform('ln', []);


Base-10 or Natural Logarithm:

::

    grid.transform(log, 10)
    grid.transform(log, 'e')


Exponential:

::

    grid.transform('exp');
    grid.transform('exp', []);


Raise to power:

::

    % Power may be any numeric scalar
    grid.transform('power', power);


Add constant:

::

    % Constant may be any numeric scalar
    grid.transform('plus', constant);


Multiply by constant:

.. rst-class:: no-margin

::

    % Constant may be any numeric scalar
    grid.transform('times', constant);


Linear transformation:  Y = a + bX

::

    % a and b may be any numeric scalars
    constants = [a, b];
    grid.transform('linear', constants)


No transformation (default):

::

    grid.transform('none');
    grid.transform('none', []);




.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Return the default transformation
+++++++++++++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example2"><label for="example2"><strong>Return the default transformation</strong></label><div class="content">


This transformation is applied to any new data sources added to the gridfile.

.. rst-class:: no-margin

::

    grid = gridfile('my-gridfile.grid');
    [transform, parameters] = grid.transform


.. rst-class:: example-output

::

    transform =
               'log'
               
    parameters =
                [10  NaN]





.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Return data source transformations
++++++++++++++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example3"><label for="example3"><strong>Return data source transformations</strong></label><div class="content">


Use the 'sources' flag to return the transformation for each data source:

.. rst-class:: no-margin

::

    grid = gridfile('my-gridfile.grid');
    nSource = numel(grid.sources)
    [sourceTransforms, sourceParams] = grid.transform('sources')


.. rst-class:: example-output

::

    nSource =
             5
    
    sourceTransforms =
                     "none"
                     "none"
                     "log"
                     "none"
                     "linear"
    
    sourceParams =
                  NaN  NaN
                  NaN  NaN
                   10  NaN
                  NaN  NaN
                    5  100


Alternatively, specify which sources to return transformations for. Either provide source names:

.. rst-class:: no-margin

::

    sourceNames = ["my-source-2.mat", "my-source-3.nc", "my-source-5.txt"];
    [sourceTransforms, sourceParams] = grid.transform('sources', sourceNames)


.. rst-class:: example-output

::

    sourceTransforms =
                     "none"
                     "log"
                     "linear"
    
    sourceParams =
                  NaN  NaN
                   10  NaN
                    5  100


Or the indices of sources in the gridfile:

.. rst-class:: no-margin

::

    sourceIndices = [2 3 5]
    sourceFills = grid.transform('sources', sourceIndices)


.. rst-class:: example-output

::

    sourceTransforms =
                     "none"
                     "log"
                     "linear"
    
    sourceParams =
                  NaN  NaN
                   10  NaN
                    5  100






.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Set the default transformation
++++++++++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example4"><label for="example4"><strong>Set the default transformation</strong></label><div class="content">


The new transformation is applied to all data sources in the gridfile, and to any data sources added to the gridfile in the future.

Create a new gridfile and examine the default transformation.

.. rst-class:: no-margin

::

    grid = gridfile('my-gridfile.grid');
    [defaultTransform, defaultParams] = grid.transform


.. rst-class:: example-output

::

    defaultTransform =
                      "none"
                      
    defaultParams =
                   NaN  NaN


Also examine the transformation for a data source. Note that the transformations for individual data sources can differ from the default transformation.

.. rst-class:: no-margin

::

    [sourceTransform, sourceParams] = grid.transform('sources', 'my-data-source.mat')


.. rst-class:: example-output

::

    sourceTransform =
                     "log"
                     
    sourceParameters =
                      10  NaN


Change the default transformation:

.. rst-class:: no-margin

::

    grid.transform('times', 1000)
    [defaultTransform, defaultParams] = grid.transform


.. rst-class:: example-output

::

    defaultTransform =
                      "times"
                      
    defaultParams =
                   1000  NaN


Note that the transformation for the data source is updated to the new default value:

.. rst-class:: no-margin

::

    [sourceTransform, sourceParams] = grid.transform('sources', 'my-data-source.mat')


.. rst-class:: example-output

::

    sourceTransform =
                     "times"
                     
    sourceParams =
                      1000  NaN




.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Set data source transformations
+++++++++++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example5"><label for="example5"><strong>Set data source transformations</strong></label><div class="content">


Use the second input to apply a transformation to specific data sources. This syntax can override default gridfile transformations:

Start by creating a gridfile object. Examine the default transformation, and transformations of individual data sources:

.. rst-class:: no-margin

::

    grid = gridfile('my-gridfile.grid');
    
    [defaultTransform, defaultParams] = grid.transform
    [sourceTransform, sourceParams] = grid.transform('sources')


.. rst-class:: example-output

::

    defaultTransform =
                      "none"
    
    defaultParams =
                   NaN  NaN
    
    sourceTransform =
                     "none"
                     "none"
                     "none"
    
    sourceParams = 
                  NaN  NaN
                  NaN  NaN
                  NaN  NaN


So far, the transformation for each data source matches the gridfile's default transformation. Next change the transformation for some of the data sources. To specify which sources to change, either provide source names or the indices of sources in the gridfile:

::

    newTransform = "log";
    newParams = 10;
    
    % Using source names
    sourceNames = ["my-source-1.mat", "my-source-2.nc"];
    grid.transform(newTransform, newParams, sourceNames);
    
    % Using source indices
    sourceIndices = [1 2];
    grid.transform(newTransform, newParams, sourceIndices);


Now re-examine the gridfile's default transformation and the transformation for each source:

.. rst-class:: no-margin

::

    [defaultTransform, defaultParams] = grid.transform
    [sourceTransform, sourceParams] = grid.transform('sources')


.. rst-class:: example-output

::

    defaultTransform =
                      "none"
    
    defaultParams =
                   NaN  NaN
    
    sourceTransform =
                     "log"
                     "log"
                     "none"
    
    sourceParams = 
                   10  NaN
                   10  NaN
                  NaN  NaN


The transformations for the two specified sources have been altered. However, the default transformation and the transformation for the third data source have not changed.

.. raw:: html

    </div></section>


----

Input Arguments
---------------

.. rst-class:: collapse-examples

.. _gridfile.transform.input.type:

type
++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input1" checked="checked"><label for="input1"><strong>type</strong></label><div class="content">

| '*ln*' | '*log*' | '*exp*' | '*power*' | '*plus*' | '*times*' | '*linear*' | '*none*'
| The type of data transformation to apply to loaded data.

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _gridfile.transform.input.params:

params
++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input2" checked="checked"><label for="input2"><strong>params</strong></label><div class="content">

| The parameters for the transformation. Use an empty array when applying transformation with no parameters (ln, exp, none) to specific data sources.

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _gridfile.transform.input.base:

base
++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input3" checked="checked"><label for="input3"><strong>base</strong></label><div class="content">

| 10 | '*e*'
| A logarithm base. 'e' selects the natural logarithm

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _gridfile.transform.input.power:

power
+++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input4" checked="checked"><label for="input4"><strong>power</strong></label><div class="content">

| *numeric* *scalar*
| The exponent that should be applied to data

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _gridfile.transform.input.plus:

plus
++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input5" checked="checked"><label for="input5"><strong>plus</strong></label><div class="content">

| *numeric* *scalar*
| A value that should be added to data

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _gridfile.transform.input.times:

times
+++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input6" checked="checked"><label for="input6"><strong>times</strong></label><div class="content">

| *numeric* *scalar*
| A value that data should be multiplied by

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _gridfile.transform.input.coeffs:

coeffs
++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input7" checked="checked"><label for="input7"><strong>coeffs</strong></label><div class="content">

| *numeric* *vector* [2]
| Coefficients for a linear transformation. The first element is the multiplicative constant, and the second element is the additive constant. Linear transformations are applied via: Y = coeffs(1) + coeffs(2) * X

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _gridfile.transform.input.s:

s
+

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input8" checked="checked"><label for="input8"><strong>s</strong></label><div class="content">

| *logical* *vector* [*nSources*] | *vector*, *linear* *indices*
| The indices of the data sources that should be receive the transformation.

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _gridfile.transform.input.sourceName:

sourceName
++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input9" checked="checked"><label for="input9"><strong>sourceName</strong></label><div class="content">

| *string* *vector*
| The names of the data sources that should receive the transformation. Names may either be just file names, or the full file path / opendap url to the source.

.. raw:: html

    </div></section>


----

Output Arguments
----------------

.. rst-class:: collapse-examples

.. _gridfile.transform.output.transform:

transform
+++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="output1" checked="checked"><label for="output1"><strong>transform</strong></label><div class="content">

| *string* *scalar*
| The default transformation for the gridfile

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _gridfile.transform.output.parameters:

parameters
++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="output2" checked="checked"><label for="output2"><strong>parameters</strong></label><div class="content">

| *numeric* *row* *vector* [2]
| Parameters for the default transformation

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _gridfile.transform.output.sourceTransform:

sourceTransform
+++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="output3" checked="checked"><label for="output3"><strong>sourceTransform</strong></label><div class="content">

| *string* *vector* [*nSource*]
| The transformations for the specified data sources

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _gridfile.transform.output.sourceParameters:

sourceParameters
++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="output4" checked="checked"><label for="output4"><strong>sourceParameters</strong></label><div class="content">

| *numeric* *matrix* [*nSource*, 2]
| Parameters for the data source transformations

.. raw:: html

    </div></section>


