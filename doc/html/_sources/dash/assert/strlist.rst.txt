dash.assert.strlist
===================
Throw error if input is not a string vector, cellstring vector, or char row vector

----

Syntax
------

.. raw:: html

    <pre>

.. rst-class:: syntax

| :ref:`list = dash.assert.strlist(input) <dash.assert.strlist.syntax1>`
| :ref:`list = dash.assert.strlist(input, name) <dash.assert.strlist.syntax2>`
| :ref:`list = dash.assert.strlist(input, name, idHeader) <dash.assert.strlist.syntax3>`

.. raw:: html

    </pre>

----

Description
-----------

.. raw:: html

    <pre>

.. _dash.assert.strlist.syntax1:

.. rst-class:: syntax

| :ref:`list <dash.assert.strlist.output.list>` = dash.assert.strlist(:ref:`input <dash.assert.strlist.input.input>`)

.. raw:: html

    </pre>

Checks if input is a string vector, cellstring vector, or char row vector. If so, returns the input as a string vector. If not, throws an error.


.. raw:: html

    <pre>

.. _dash.assert.strlist.syntax2:

.. rst-class:: syntax

| :ref:`list <dash.assert.strlist.output.list>` = dash.assert.strlist(:ref:`input <dash.assert.strlist.input.input>`, :ref:`name <dash.assert.strlist.input.name>`)

.. raw:: html

    </pre>

Use a custom name to refer to variable in the error message.


.. raw:: html

    <pre>

.. _dash.assert.strlist.syntax3:

.. rst-class:: syntax

| :ref:`list <dash.assert.strlist.output.list>` = dash.assert.strlist(:ref:`input <dash.assert.strlist.input.input>`, :ref:`name <dash.assert.strlist.input.name>`, :ref:`idHeader <dash.assert.strlist.input.idHeader>`)

.. raw:: html

    </pre>

Use a custom header for thrown error IDs.


----

Examples
--------

.. rst-class:: collapse-examples

Assert input is strlist
+++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example1"><label for="example1"><strong>Assert input is strlist</strong></label><div class="content">


Example inputs that pass the assertion:

::

    dash.assert.strlist(["A","string","vector"])
    dash.assert.strlist({'A','cellstring','vector'})
    dash.assert.strlist('A char row vector')


Example inputs that fail the assertion:

.. rst-class:: no-margin

::

    dash.assert.strlist(5)
    dash.assert.strlist(true)
    dash.assert.strlist(["An", "example"; "string", "matrix"])


.. rst-class:: example-output error-message 

::

    input must be a string vector, cellstring vector, or character row vector



.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Customize Error
+++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example2"><label for="example2"><strong>Customize Error</strong></label><div class="content">


Customize the error message so it mimics errors from a calling function:

.. rst-class:: no-margin

::

    name = 'my variable';
    header = 'myHeader';
    dash.assert.strflag(5, name, header);


.. rst-class:: example-output error-message 

::

    my variable must be a string vector, cellstring vector, or character row vector


Examine the error ID:

.. rst-class:: no-margin

::

    ME = lasterror;
    ID = ME.identifier


.. rst-class:: example-output

::

    ID =
        myHeader:inputNotStrlist



.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Convert input to string
+++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example3"><label for="example3"><strong>Convert input to string</strong></label><div class="content">


If the assertion passes, the input is returned as a string vector. Use this to allow for a single data type (string) in subsequent code. For example:

.. rst-class:: no-margin

::

    input = {'A', 'cellstring', 'vector'};
    str = dash.assert.strflag(input);
    type = class(str)


.. rst-class:: example-output

::

    type =
          'string'


The cellstring input has been converted to a string data type.

.. raw:: html

    </div></section>


----

Input Arguments
---------------

.. rst-class:: collapse-examples

.. _dash.assert.strlist.input.input:

input
+++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input1" checked="checked"><label for="input1"><strong>input</strong></label><div class="content">

| The input being tested

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.assert.strlist.input.name:

name
++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input2" checked="checked"><label for="input2"><strong>name</strong></label><div class="content">

| *string* *scalar*
| The name of the input in the calling function. Default is "input"

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.assert.strlist.input.idHeader:

idHeader
++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input3" checked="checked"><label for="input3"><strong>idHeader</strong></label><div class="content">

| *string* *scalar*
| A header for thrown error IDs. Default is "DASH:assert:strlist"

.. raw:: html

    </div></section>


----

Output Arguments
----------------

.. rst-class:: collapse-examples

.. _dash.assert.strlist.output.list:

list
++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="output1" checked="checked"><label for="output1"><strong>list</strong></label><div class="content">

| *string* *vector*
| The input converted to string data type

.. raw:: html

    </div></section>


