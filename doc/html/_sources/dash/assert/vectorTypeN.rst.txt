dash.assert.vector
==================
Throws error if input is not a vector of a specified format

----

Syntax
------

.. raw:: html

    <pre>

.. rst-class:: syntax

| :ref:`dash.assert.vectorTypeN(input, type, length) <dash.assert.vector.syntax1>`
| :ref:`dash.assert.vectorTypeN(input, type, length, name) <dash.assert.vector.syntax2>`
| :ref:`dash.assert.vectorTypeN(input, type, length, name, idHeader) <dash.assert.vector.syntax3>`

.. raw:: html

    </pre>

----

Description
-----------

.. raw:: html

    <pre>

.. _dash.assert.vector.syntax1:

.. rst-class:: syntax

| dash.assert.vectorTypeN(:ref:`input <dash.assert.vector.input.input>`, :ref:`type <dash.assert.vector.input.type>`, :ref:`length <dash.assert.vector.input.length>`)

.. raw:: html

    </pre>

Checks if an input is a vector of the required data type and length. If not, throws an error


.. raw:: html

    <pre>

.. _dash.assert.vector.syntax2:

.. rst-class:: syntax

| dash.assert.vectorTypeN(:ref:`input <dash.assert.vector.input.input>`, :ref:`type <dash.assert.vector.input.type>`, :ref:`length <dash.assert.vector.input.length>`, :ref:`name <dash.assert.vector.input.name>`)

.. raw:: html

    </pre>

Use a custom name to refer to the input in error messages.


.. raw:: html

    <pre>

.. _dash.assert.vector.syntax3:

.. rst-class:: syntax

| dash.assert.vectorTypeN(:ref:`input <dash.assert.vector.input.input>`, :ref:`type <dash.assert.vector.input.type>`, :ref:`length <dash.assert.vector.input.length>`, :ref:`name <dash.assert.vector.input.name>`, :ref:`idHeader <dash.assert.vector.input.idHeader>`)

.. raw:: html

    </pre>

Use a custom header for thrown error IDs.


----

Examples
--------

.. rst-class:: collapse-examples

Assert input is a vector with required data type and length
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example1"><label for="example1"><strong>Assert input is a vector with required data type and length</strong></label><div class="content">


Examples that pass the assertion:

::

    dash.assert.vectorTypeN([1 2 3], 'numeric', 3)
    dash.assert.vectorTypeN([1 2 3], 'double', 3)
    dash.assert.vectorTypeN(true(4,1), 'logical', 4)
    dash.assert.vectorTypeN(["a","string","vector"], 'string', 3)


Examples that fail the assertion

.. rst-class:: no-margin

::

    dash.assert.vectorTypeN(rand(4,4), 'numeric', 16)


.. rst-class:: example-output error-message 

::

    input is not a vector


.. rst-class:: no-margin

::

    dash.assert.vectorTypeN(true(4,1), 'numeric', 5)


.. rst-class:: example-output error-message 

::

    input must be a numeric vector, but it is a logical vector instead


.. rst-class:: no-margin

::

    dash.assert.vectorTypeN([1 2 3], 'numeric', 4)


.. rst-class:: example-output error-message 

::

    input must have 4 elements, but has 3 elements instead




.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Ignore data type
++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example2"><label for="example2"><strong>Ignore data type</strong></label><div class="content">


Use an empty array for the second input to not require a data type:

::

    dash.assert.vectorTypeN([1 2 3], [], 3)



.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Ignore vector length
++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example3"><label for="example3"><strong>Ignore vector length</strong></label><div class="content">


Use an empty array for the third input to not require a vector length:

::

    dash.assert.vectorTypeN([1 2 3], 'numeric', [])



.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Customize error message
+++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example4"><label for="example4"><strong>Customize error message</strong></label><div class="content">


Customize the error message so it appears to originate from a calling function:

.. rst-class:: no-margin

::

    name = "my variable";
    idHeader = "my:error:header";
    
    dash.assert.vectorTypeN(rand(4,4), 'numeric', 16)


.. rst-class:: example-output error-message 

::

    my variable is not a vector


Also examine the error ID:

.. rst-class:: no-margin

::

    ME = lasterror;
    ID = ME.identifier


.. rst-class:: example-output

::

    ID =
        'my:error:header:inputNotVector'





.. raw:: html

    </div></section>


----

Input Arguments
---------------

.. rst-class:: collapse-examples

.. _dash.assert.vector.input.input:

input
+++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input1" checked="checked"><label for="input1"><strong>input</strong></label><div class="content">

| The input being tested

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.assert.vector.input.type:

type
++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input2" checked="checked"><label for="input2"><strong>type</strong></label><div class="content">

| *string* *scalar* | *empty* *array*
| The required data type of the input. Use an empty array to allow any type

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.assert.vector.input.length:

length
++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input3" checked="checked"><label for="input3"><strong>length</strong></label><div class="content">

| *scalar* *positive* *integer* | *empty* *array*
| The required length of the vector. Use an empty array to allow any length

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.assert.vector.input.name:

name
++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input4" checked="checked"><label for="input4"><strong>name</strong></label><div class="content">

| *string* *scalar*
| The name of the input in the calling function for use in error messages. Default is "input"

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.assert.vector.input.idHeader:

idHeader
++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input5" checked="checked"><label for="input5"><strong>idHeader</strong></label><div class="content">

| *string* *scalar*
| Header for thrown error IDs. Default is "DASH:assert:vectorTypeN"

.. raw:: html

    </div></section>


