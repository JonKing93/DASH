dash.assert.fileExists
======================
Throw error if a file does not exist

----

Syntax
------

.. raw:: html

    <pre>

.. rst-class:: syntax

| :ref:`abspath = dash.assert.fileExists(filename) <dash.assert.fileExists.syntax1>`
| :ref:`abspath = dash.assert.fileExists(filename, ext) <dash.assert.fileExists.syntax2>`
| :ref:`abspath = dash.assert.fileExists(filename, ext, idHeader) <dash.assert.fileExists.syntax3>`

.. raw:: html

    </pre>

----

Description
-----------

.. raw:: html

    <pre>

.. _dash.assert.fileExists.syntax1:

.. rst-class:: syntax

| :ref:`abspath <dash.assert.fileExists.output.abspath>` = dash.assert.fileExists(:ref:`filename <dash.assert.fileExists.input.filename>`)

.. raw:: html

    </pre>

Checks if a file exists. If not, throws an error. If so, returns the absolute path to the file as a string.


.. raw:: html

    <pre>

.. _dash.assert.fileExists.syntax2:

.. rst-class:: syntax

| :ref:`abspath <dash.assert.fileExists.output.abspath>` = dash.assert.fileExists(:ref:`filename <dash.assert.fileExists.input.filename>`, :ref:`ext <dash.assert.fileExists.input.ext>`)

.. raw:: html

    </pre>

Also checks for files with the given extension.


.. raw:: html

    <pre>

.. _dash.assert.fileExists.syntax3:

.. rst-class:: syntax

| :ref:`abspath <dash.assert.fileExists.output.abspath>` = dash.assert.fileExists(:ref:`filename <dash.assert.fileExists.input.filename>`, :ref:`ext <dash.assert.fileExists.input.ext>`, :ref:`idHeader <dash.assert.fileExists.input.idHeader>`)

.. raw:: html

    </pre>

Uses a custom header in thrown error IDs.


----

Examples
--------

.. rst-class:: collapse-examples

Assert that a file exists
+++++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example1"><label for="example1"><strong>Assert that a file exists</strong></label><div class="content">


A file that passes the assertion:

::

    filename = "a-file-that-exists.mat";
    dash.assert.fileExists(filename)
    
    filename = "path/to/a-file-that-exists.mat";
    dash.assert.fileExists(filename)


Files that fail the assertion:

.. rst-class:: no-margin

::

    filename = "not-a-real-file.mat";
    dash.assert.fileExists(filename)


.. rst-class:: example-output error-message 

::

    File "not-a-real-file.mat" could not be found. It may be misspelled or not on the active path.




.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Include default file extension
++++++++++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example2"><label for="example2"><strong>Include default file extension</strong></label><div class="content">


Look at the extension of a file on the active path:

.. rst-class:: no-margin

::

    dir


.. rst-class:: example-output

::

    .      ..      myFile.mat


We can see that "myFile" has a ".mat" extension.

Provide the file name and default extension:

::

    dash.assert.fileExists("myFile", ".mat")


The assertion passes.



.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Customize error message
+++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example3"><label for="example3"><strong>Customize error message</strong></label><div class="content">


Customize error messages so they appear to originate from the calling function:

.. rst-class:: no-margin

::

    file = "not-a-file.mat";
    idHeader = "my:error:header";
    dash.assert.fileExists(file, [], idHeader);


.. rst-class:: example-output error-message 

::

    File "not-a-file.mat" could not be found. It may be misspelled or not on the active path."


Examine the error ID:

.. rst-class:: no-margin

::

    ME = lasterror;
    ID = ME.identifier


.. rst-class:: example-output

::

    ID =
        'my:error:header:fileNotFound'




.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Return absolute file path
+++++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example4"><label for="example4"><strong>Return absolute file path</strong></label><div class="content">


Look for files on the active path:

.. rst-class:: no-margin

::

    dir


.. rst-class:: example-output

::

    .    ..    myFolder


Look for files in the folder:

.. rst-class:: no-margin

::

    dir myFolder


.. rst-class:: example-output

::

    .   ..   myFile.txt


We can see the file "myFile.txt" is located in the folder named "myFolder". If we assert that myFile.txt exists using only the filename, the function returns the full path to the file:

.. rst-class:: no-margin

::

    file = "myFile.txt";
    fullpath = dash.assert.fileExists(file)


.. rst-class:: example-output

::

    fullpath =
              "myFolder/myFile.txt"





.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Customize error message
+++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example5"><label for="example5"><strong>Customize error message</strong></label><div class="content">


Customize the error message so it appears to originate from the calling function:

.. rst-class:: no-margin

::

    file = "not-a-real-file.m";

.. raw:: html

    </div></section>


----

Input Arguments
---------------

.. rst-class:: collapse-examples

.. _dash.assert.fileExists.input.filename:

filename
++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input1" checked="checked"><label for="input1"><strong>filename</strong></label><div class="content">

| *string* *scalar*
| The name of a file

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.assert.fileExists.input.ext:

ext
+++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input2" checked="checked"><label for="input2"><strong>ext</strong></label><div class="content">

| *string* *scalar* | *empty* *array*
| Default file extension. Leave unset, or use an empty array to not check extensions.

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.assert.fileExists.input.idHeader:

idHeader
++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input3" checked="checked"><label for="input3"><strong>idHeader</strong></label><div class="content">

| *string* *scalar*
| Header to use in thrown error IDs. Default is "DASH:assert:fileExists"

.. raw:: html

    </div></section>


----

Output Arguments
----------------

.. rst-class:: collapse-examples

.. _dash.assert.fileExists.output.abspath:

abspath
+++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="output1" checked="checked"><label for="output1"><strong>abspath</strong></label><div class="content">

| *string* *scalar*
| The absolute path to the file

.. raw:: html

    </div></section>


