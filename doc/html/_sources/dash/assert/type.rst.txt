dash.assert.type
================
Throw error if input is not required type

----

Syntax
------

.. raw:: html

    <pre>

.. rst-class:: syntax

| :ref:`dash.assert.type(input, type)  checks if input is the required data <dash.assert.type.syntax1>`
| :ref:`dash.assert.type(input, type, name, descriptor)  uses a custom name and <dash.assert.type.syntax2>`
| :ref:`dash.assert.type(input, type, name, descriptor, idHeader)  uses a custom <dash.assert.type.syntax3>`

.. raw:: html

    </pre>

----

Description
-----------

.. raw:: html

    <pre>

.. _dash.assert.type.syntax1:

.. rst-class:: syntax

| dash.assert.type(:ref:`input <dash.assert.type.input.input>`, :ref:`type <dash.assert.type.input.type>`)  checks if input is the required data

.. raw:: html

    </pre>

type. If not, throws an error.


.. raw:: html

    <pre>

.. _dash.assert.type.syntax2:

.. rst-class:: syntax

| dash.assert.type(:ref:`input <dash.assert.type.input.input>`, :ref:`type <dash.assert.type.input.type>`, :ref:`name <dash.assert.type.input.name>`, :ref:`descriptor <dash.assert.type.input.descriptor>`)  uses a custom name and

.. raw:: html

    </pre>

data type descriptor in thrown error messages.


.. raw:: html

    <pre>

.. _dash.assert.type.syntax3:

.. rst-class:: syntax

| dash.assert.type(:ref:`input <dash.assert.type.input.input>`, :ref:`type <dash.assert.type.input.type>`, :ref:`name <dash.assert.type.input.name>`, :ref:`descriptor <dash.assert.type.input.descriptor>`, :ref:`idHeader <dash.assert.type.input.idHeader>`)  uses a custom

.. raw:: html

    </pre>

header in thrown error IDs.


----

Examples
--------

.. rst-class:: collapse-examples

Assert input is data type
+++++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example1"><label for="example1"><strong>Assert input is data type</strong></label><div class="content">


Examples that pass the assertion:
::

    dash.assert.type(5, 'numeric')
    dash.assert.type(5, 'double')
    dash.assert.type(false, 'logical')
    dash.assert.type(struct('myField',1), 'struct')
    dash.assert.type("a string", 'string')
    dash.assert.type({rand(4,5)}, 'cell')


Examples that fail the assertion:
.. rst-class:: no-margin

::

    dash.assert.type({5}, 'numeric')


.. rst-class:: example-output error-message 

::

    input must be a numeric data type, but it is a cell data type instead


.. rst-class:: no-margin

::

    dash.assert.type("a string", 'char')


.. rst-class:: example-output error-message 

::

    input must be a char data type, but it is a string data type instead




.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Customize the error message
+++++++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example2"><label for="example2"><strong>Customize the error message</strong></label><div class="content">


Customize the error messages so they appear to originate from a calling function:

.. rst-class:: no-margin

::

    name = "my variable";
    description = "(data type descriptor)";
    idHeader = "my:error:header";
    
    dash.assert.type({5}, 'logical')


.. rst-class:: example-output error-message 

::

    my variable must be a logical (data type descriptor), but it is a cell (data type descriptor) instead


Also examine the error ID:

.. rst-class:: no-margin

::

    ME = lasterror;
    ID = ME.identifier


.. rst-class:: example-output

::

    ID =
        'my:error:header:inputWrongType'

.. raw:: html

    </div></section>


----

Input Arguments
---------------

.. rst-class:: collapse-examples

.. _dash.assert.type.input.input:

input
+++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input1" checked="checked"><label for="input1"><strong>input</strong></label><div class="content">

| The input being tested

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.assert.type.input.type:

type
++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input2" checked="checked"><label for="input2"><strong>type</strong></label><div class="content">

| *string* *scalar*
| The required data type

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.assert.type.input.name:

name
++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input3" checked="checked"><label for="input3"><strong>name</strong></label><div class="content">

| *string* *scalar*
| The name of the input in the calling function for use in error messages. Default is "input"

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.assert.type.input.descriptor:

descriptor
++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input4" checked="checked"><label for="input4"><strong>descriptor</strong></label><div class="content">

| *string* *scalar*
| Descriptor for data type in error messages. Default is "data type"

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.assert.type.input.idHeader:

idHeader
++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input5" checked="checked"><label for="input5"><strong>idHeader</strong></label><div class="content">

| *string* *scalar*
| Header for thrown error IDs. Default is "DASH:assert:type"

.. raw:: html

    </div></section>


