dash.parse.inputs
=================
Parses inputs for flag-value input pairs.

----

Syntax
------

.. rst-class:: syntax

| :ref:`values = dash.parse.inputs(inputs, flags, defaults, nPrev) <dash.parse.inputs.syntax1>`

----

Description
-----------

.. _dash.parse.inputs.syntax1:

.. rst-class:: syntax

:ref:`values <dash.parse.inputs.output.values>` = dash.parse.inputs(:ref:`inputs <dash.parse.inputs.input.inputs>`, :ref:`flags <dash.parse.inputs.input.flags>`, :ref:`defaults <dash.parse.inputs.input.defaults>`, :ref:`nPrev <dash.parse.inputs.input.nPrev>`)

Parses a set of inputs given a set of input string flags. If a flag is not passed to a function, returns a default value.


----

Examples
--------

.. rst-class:: collapse-examples

Parse a set of optional inputs
++++++++++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example1"><label for="example1"><strong>Parse a set of optional inputs</strong></label><div class="content">


Specify a set of input flags and associated default values

::

    flags = ["plus", "times", "overwrite"];
    defaults = {0, 1, true};


Parse inputs for a function with 3 required inputs and subsequent optional inputs:

.. rst-class:: no-margin

::

    nPrevious = 3;
    varargout = {"times", 5, 'overwrite', false};
    
    [plus, times, overwrite] = parse.inputs(varargout, flags, defaults, nPrevious)


.. rst-class:: example-output

::

    plus =
          0
          
    times =
           5
           
    overwrite = 
               false


The "times" and "overwrite" variables have been set to the user-specified values of 5 and false. The "plus" flag was not set, and thus is set to the default value of 0.

Examine the parsed values. 

::


.. raw:: html

    </div></section>


----

Input Arguments
---------------

.. rst-class:: collapse-examples

.. _dash.parse.inputs.input.inputs:

inputs
++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input1" checked="checked"><label for="input1"><strong>inputs</strong></label><div class="content">

| *cell* *vector*)[*nInputs*
| A set of Name-Value input paris. Usually the varargin vector from the calling function

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.parse.inputs.input.flags:

flags
+++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input2" checked="checked"><label for="input2"><strong>flags</strong></label><div class="content">

| *string* *vector*)[*nFlags*
| The strings used to flag options for a function

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.parse.inputs.input.defaults:

defaults
++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input3" checked="checked"><label for="input3"><strong>defaults</strong></label><div class="content">

| *cell* *vector*)[*nFlags*
| The default value for each flagged option

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.parse.inputs.input.nPrev:

nPrev
+++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input4" checked="checked"><label for="input4"><strong>nPrev</strong></label><div class="content">

| *scalar* *positive* *integer*
| The number of inputs before varargin in the calling function. Used for error messages

.. raw:: html

    </div></section>


----

Output Arguments
----------------

.. rst-class:: collapse-examples

.. _dash.parse.inputs.output.values:

values
++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="output1" checked="checked"><label for="output1"><strong>values</strong></label><div class="content">

| *cell* *vector*)[*nFlags*
| The parsed value for each flag

.. raw:: html

    </div></section>


