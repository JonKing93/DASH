dash.parse.inputOrCell
======================
Parse inputs that are either cell vector of arrays, or a single array

----

Syntax
------

.. raw:: html

    <pre>

.. rst-class:: syntax

| :ref:`[input, wasCell] = dash.parse.inputOrCell(input, nEls) <dash.parse.inputOrCell.syntax1>`
| :ref:`... = dash.parse.inputOrCell(input, nEls, name, header) <dash.parse.inputOrCell.syntax2>`

.. raw:: html

    </pre>

----

Description
-----------

.. raw:: html

    <pre>

.. _dash.parse.inputOrCell.syntax1:

.. rst-class:: syntax

| [:ref:`input <dash.parse.inputOrCell.output.input>`, :ref:`wasCell <dash.parse.inputOrCell.output.wasCell>`] = dash.parse.inputOrCell(:ref:`input <dash.parse.inputOrCell.input.input>`, :ref:`nEls <dash.parse.inputOrCell.input.nEls>`)

.. raw:: html

    </pre>

Parses an input that can either be a cell vector of arrays, or a single array. If multiple array are required, ensures the input is a cell vector with the correct number of elements. If a single array is required and the input is an array, returns the array in a cell scalar. Also returns whether the input was a cell vector or direct array.


.. raw:: html

    <pre>

.. _dash.parse.inputOrCell.syntax2:

.. rst-class:: syntax

| ... = dash.parse.inputOrCell(:ref:`input <dash.parse.inputOrCell.input.input>`, :ref:`nEls <dash.parse.inputOrCell.input.nEls>`, :ref:`name <dash.parse.inputOrCell.input.name>`, :ref:`header <dash.parse.inputOrCell.input.header>`)

.. raw:: html

    </pre>

Customize thrown error messages and IDs.


----

Examples
--------

.. rst-class:: collapse-examples

Parse an input that holds multiple arrays
+++++++++++++++++++++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example1"><label for="example1"><strong>Parse an input that holds multiple arrays</strong></label><div class="content">


Inputs that parse successfully:

.. rst-class:: no-margin

::

    nArraysNeeded = 3;
    input = {1,2,3};
    [input, wasCell] = dash.parse.inputOrCell(input, nArraysNeeded)


.. rst-class:: example-output

::

    input = 
           {1   2   3}
           
    wasCell = 
              true


Inputs that throw an error:

.. rst-class:: no-margin

::

    nArraysNeeded = 3;
    input = {1,2,3,4};
    dash.parse.inputOrcell(input, nArraysNeeded)


.. rst-class:: example-output error-message 

::

    input must have 3 elements, but has 4 elements instead.


.. rst-class:: no-margin

::

    nArraysNeeded = 3;
    input = [1 2 3];
    dash.parse.inputOrCell(input, nArraysNeeded)


::

    input must be a cell vector, but it is a double vector instead



.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Parse an input that holds a single array
++++++++++++++++++++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example2"><label for="example2"><strong>Parse an input that holds a single array</strong></label><div class="content">


When the array is in a cell:

.. rst-class:: no-margin

::

    nArraysNeeded = 1;
    input = {rand(4,4)};
    [input, wasCell] = dash.parse.inputOrCell(input, nArraysNeeded)


.. rst-class:: example-output

::

    input =
           {4x4 double}
           
    wasCell =
             true


When the array is provided directly:

.. rst-class:: no-margin

::

    nArraysNeeded = 1;
    input = rand(4,4);
    [input, wasCell] = dash.parse.inputOrCell(input, nArraysNeeded)


.. rst-class:: example-output

::

    input =
           {4x4 double}
           
    wasCell =
             false


The input array has been placed in a cell, and the second output notes it was not a cell originally.


.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

Customize error messages
++++++++++++++++++++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="example3"><label for="example3"><strong>Customize error messages</strong></label><div class="content">


Customize thrown error messages:

.. rst-class:: no-margin

::

    inputName = 'my variable';
    header = 'my:error:header';
    
    input = {1};
    nArraysNeeded = 3;
    
    dash.parse.inputOrCell(input, nArraysNeeded, inputName, header);


.. rst-class:: example-output error-message 

::

    my variable must have 3 elements, but it has 1 element instead


Also examine the error ID:

.. rst-class:: no-margin

::

    ME = lasterror;
    ID = ME.identifier


.. rst-class:: example-output

::

    ID =
        'my:error:header'




.. raw:: html

    </div></section>


----

Input Arguments
---------------

.. rst-class:: collapse-examples

.. _dash.parse.inputOrCell.input.input:

input
+++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input1" checked="checked"><label for="input1"><strong>input</strong></label><div class="content">

| The input being tested

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.parse.inputOrCell.input.nEls:

nEls
++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input2" checked="checked"><label for="input2"><strong>nEls</strong></label><div class="content">

| *numeric* *scalar*
| The number of arrays required.

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.parse.inputOrCell.input.name:

name
++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input3" checked="checked"><label for="input3"><strong>name</strong></label><div class="content">

| *string* *scalar*
| A name to refer to the input in error messages. Default is "input".

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.parse.inputOrCell.input.header:

header
++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="input4" checked="checked"><label for="input4"><strong>header</strong></label><div class="content">

| *string* *scalar*
| Header for thrown error IDs. Default is "DASH:parse:inputOrCell"

.. raw:: html

    </div></section>


----

Output Arguments
----------------

.. rst-class:: collapse-examples

.. _dash.parse.inputOrCell.output.input:

input
+++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="output1" checked="checked"><label for="output1"><strong>input</strong></label><div class="content">

| *cell* *vector*
| The input array stored in a cell vector

.. raw:: html

    </div></section>



.. rst-class:: collapse-examples

.. _dash.parse.inputOrCell.output.wasCell:

wasCell
+++++++

.. raw:: html

    <section class="accordion"><input type="checkbox" name="collapse" id="output2" checked="checked"><label for="output2"><strong>wasCell</strong></label><div class="content">

| *scalar* *logical*
| True if the input was a cell vector. Otherwise, false.

.. raw:: html

    </div></section>


